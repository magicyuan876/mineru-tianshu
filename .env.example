# Tianshu (天枢) - Environment Variables Configuration
# 环境变量配置文件
#
# 使用方式:
#   1. 复制此文件为 .env: cp .env.example .env
#   2. 修改配置项
#   3. 启动服务: docker-compose up -d

# ============================================================================
# Application Settings
# ============================================================================
# 运行环境: development, production
ENV=production

# 日志级别: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ============================================================================
# Service Ports
# ============================================================================
# API Server 端口
API_PORT=8000

# LitServe Worker 端口
WORKER_PORT=8001

# MCP Server 端口
MCP_PORT=8002

# Frontend 端口
FRONTEND_PORT=80

# ============================================================================
# JWT Authentication
# ============================================================================
# JWT 密钥（生产环境必须修改！使用强随机字符串）
# 生成方式: openssl rand -hex 32
JWT_SECRET_KEY=CHANGE_THIS_TO_A_SECURE_RANDOM_STRING_IN_PRODUCTION

# JWT 算法
JWT_ALGORITHM=HS256

# Access Token 过期时间（分钟）
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Refresh Token 过期时间（天）
REFRESH_TOKEN_EXPIRE_DAYS=7

# ============================================================================
# CORS Settings
# ============================================================================
# 允许的跨域来源（逗号分隔）
# 生产环境示例: https://yourdomain.com,https://app.yourdomain.com
ALLOWED_ORIGINS=http://localhost:5173,http://localhost:80,http://localhost:8000

# ============================================================================
# GPU Configuration
# ============================================================================
# 使用的 GPU 设备（逗号分隔的设备 ID）
# 例如: 0 或 0,1 或 0,1,2,3
CUDA_VISIBLE_DEVICES=0

# GPU 数量
GPU_COUNT=1

# Worker GPU 数量（用于 LitServe 负载均衡）
WORKER_GPUS=1

# ============================================================================
# Worker Configuration
# ============================================================================
# Worker 服务 URL（Docker 环境使用容器名）
WORKER_URL=http://worker:8001

# 最大批处理大小
MAX_BATCH_SIZE=4

# Worker 超时时间（秒）
WORKER_TIMEOUT=300

# ============================================================================
# File Upload Settings
# ============================================================================
# 最大文件大小（字节）
# 500MB = 524288000
# 1GB = 1073741824
MAX_FILE_SIZE=524288000

# 允许的文件类型（逗号分隔）
ALLOWED_FILE_TYPES=pdf,docx,doc,ppt,pptx,xlsx,xls,png,jpg,jpeg,gif,bmp,tiff,mp3,wav,mp4,avi,mov,fasta,fa,fna,gb,gbk

# ============================================================================
# Model Configuration
# ============================================================================
# 默认 OCR 后端: mineru, deepseek-ocr, paddleocr-vl, markitdown
DEFAULT_OCR_BACKEND=mineru

# 默认音频后端: sensevoice
DEFAULT_AUDIO_BACKEND=sensevoice

# 默认视频处理: keyframe
DEFAULT_VIDEO_BACKEND=keyframe

# ============================================================================
# MinIO Object Storage (Optional)
# ============================================================================
# 是否启用 MinIO
ENABLE_MINIO=false

# MinIO 连接配置
MINIO_ENDPOINT=minio:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET=tianshu-data
MINIO_SECURE=false

# ============================================================================
# SSO Configuration (Optional)
# ============================================================================
# 是否启用 SSO
ENABLE_SSO=false

# OIDC (OpenID Connect) 配置
OIDC_CLIENT_ID=your-client-id
OIDC_CLIENT_SECRET=your-client-secret
OIDC_DISCOVERY_URL=https://your-sso-provider.com/.well-known/openid-configuration

# SAML 2.0 配置
SAML_ENTITY_ID=your-entity-id
SAML_SSO_URL=https://your-sso-provider.com/sso
SAML_X509_CERT=your-x509-certificate

# ============================================================================
# Database Configuration
# ============================================================================
# SQLite 数据库路径（相对于 backend 目录）
DATABASE_PATH=mineru_tianshu.db

# 数据库备份保留天数
DATABASE_BACKUP_RETENTION_DAYS=30

# ============================================================================
# Frontend Configuration
# ============================================================================
# API Base URL（前端访问后端的地址）
# 开发环境: http://localhost:8000
# 生产环境: https://api.yourdomain.com
VITE_API_BASE_URL=http://localhost:8000

# ============================================================================
# MCP Server Configuration
# ============================================================================
# API URL（MCP Server 访问 API Server 的地址）
API_URL=http://backend:8000

# ============================================================================
# Monitoring & Health Check
# ============================================================================
# 健康检查间隔（秒）
HEALTH_CHECK_INTERVAL=30

# 健康检查超时（秒）
HEALTH_CHECK_TIMEOUT=10

# ============================================================================
# Advanced Settings
# ============================================================================
# 是否启用调试模式（仅开发环境）
DEBUG=false

# 是否启用热重载（仅开发环境）
RELOAD=false

# API 文档是否公开访问
ENABLE_API_DOCS=true

# 是否启用 Prometheus metrics
ENABLE_METRICS=false

# ============================================================================
# Docker Compose Overrides
# ============================================================================
# 使用国内镜像加速（可选）
# USE_CHINA_MIRROR=true

# 构建时是否使用缓存
# DOCKER_BUILD_NO_CACHE=false
