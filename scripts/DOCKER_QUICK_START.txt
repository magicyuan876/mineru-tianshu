╔════════════════════════════════════════════════════════════════════════════╗
║                   Tianshu (天枢) - Docker 快速入门指南                       ║
╚════════════════════════════════════════════════════════════════════════════╝

📋 目录
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. 前置要求
2. 快速部署（3 种方式）
3. 访问服务
4. 常用命令
5. 故障排查
6. 生产环境建议

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1️⃣ 前置要求
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ 必需：
  • Docker 20.10+          (https://docs.docker.com/get-docker/)
  • Docker Compose 2.0+    (通常随 Docker 一起安装)
  • 16GB+ RAM
  • 50GB+ 可用磁盘空间

⭐ GPU 支持（推荐）：
  • NVIDIA GPU (CUDA Compute Capability 6.0+)
  • NVIDIA Driver 520.06+
  • NVIDIA Container Toolkit
    安装: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/

🔍 验证安装：
  docker --version
  docker-compose --version
  nvidia-smi  # GPU 支持

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

2️⃣ 快速部署（3 种方式）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

方式 A：使用 Makefile（推荐）
────────────────────────────────────────────
  # 一键部署
  make setup

  # 查看帮助
  make help

方式 B：使用快速部署脚本
────────────────────────────────────────────
  Linux/Mac:
    cd scripts
    chmod +x docker-setup.sh
    ./docker-setup.sh

  Windows:
    cd scripts
    docker-setup.bat

方式 C：手动部署
────────────────────────────────────────────
  # 1. 配置环境变量
  cp .env.example .env
  # 编辑 .env，修改 JWT_SECRET_KEY

  # 2. 创建必要目录
  mkdir -p models data/uploads data/output data/db logs/{backend,worker,mcp}

  # 3. 构建镜像
  docker-compose build --parallel

  # 4. 启动服务
  docker-compose up -d

  # 5. 查看状态
  docker-compose ps

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

3️⃣ 访问服务
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

服务启动后，访问以下地址：

  🌐 前端界面:  http://localhost:80
  📚 API 文档:  http://localhost:8000/docs
  ⚙️  Worker:    http://localhost:8001
  🔌 MCP:       http://localhost:8002

⚠️ 首次运行注意事项：
  • AI 模型会自动下载，可能需要 10-30 分钟
  • 首次启动较慢，请耐心等待
  • 需要通过注册页面创建管理员账号

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

4️⃣ 常用命令
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

使用 Makefile（推荐）：
────────────────────────────────────────────
  make start              # 启动服务
  make stop               # 停止服务
  make restart            # 重启服务
  make status             # 查看状态
  make logs               # 查看日志
  make logs-backend       # 查看后端日志
  make test-gpu           # 测试 GPU
  make shell-backend      # 进入后端容器
  make clean              # 清理数据

使用 docker-compose：
────────────────────────────────────────────
  docker-compose up -d              # 启动
  docker-compose down               # 停止
  docker-compose restart            # 重启
  docker-compose ps                 # 状态
  docker-compose logs -f            # 日志
  docker-compose logs -f backend    # 后端日志
  docker-compose exec backend bash  # 进入容器

开发环境：
────────────────────────────────────────────
  make dev                # 启动开发环境
  make dev-stop           # 停止开发环境
  make dev-logs           # 查看日志

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

5️⃣ 故障排查
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

问题：容器无法启动
────────────────────────────────────────────
  1. 查看容器日志
     docker-compose logs backend

  2. 检查端口占用
     Linux/Mac: netstat -tlnp | grep 8000
     Windows:   netstat -ano | findstr 8000

  3. 检查 .env 配置
     cat .env

  4. 查看容器状态
     docker-compose ps

问题：GPU 不可用
────────────────────────────────────────────
  1. 检查 NVIDIA 驱动
     nvidia-smi

  2. 测试 Docker GPU 支持
     docker run --rm --gpus all nvidia/cuda:12.6.2-base nvidia-smi

  3. 检查容器 GPU
     docker-compose exec worker nvidia-smi

问题：模型下载失败
────────────────────────────────────────────
  1. 检查网络连接
     docker-compose exec backend curl -I https://huggingface.co

  2. 手动下载模型到 models/ 目录

  3. 使用国内镜像（ModelScope）
     # 在 .env 中设置
     USE_MODELSCOPE=true

问题：前端无法访问后端
────────────────────────────────────────────
  1. 检查 CORS 配置
     # .env
     ALLOWED_ORIGINS=http://localhost:80

  2. 检查容器网络
     docker network inspect tianshu-network

  3. 测试 API
     curl http://localhost:8000/health

问题：数据库错误
────────────────────────────────────────────
  1. 备份数据库
     make backup-db

  2. 检查数据库文件权限
     ls -l data/db/

  3. 重新初始化（警告：会丢失数据）
     docker-compose down -v
     rm -rf data/db/
     docker-compose up -d

常用调试命令：
────────────────────────────────────────────
  # 查看容器资源使用
  docker stats

  # 查看容器详细信息
  docker inspect mineru-backend

  # 查看容器环境变量
  docker-compose exec backend env

  # 测试容器间网络
  docker-compose exec backend ping worker

  # 强制重建
  docker-compose up -d --force-recreate --no-deps backend

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

6️⃣ 生产环境建议
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

安全配置：
────────────────────────────────────────────
  ✅ 修改默认 JWT_SECRET_KEY
     # 生成强随机密钥
     openssl rand -hex 32

  ✅ 限制 CORS
     ALLOWED_ORIGINS=https://yourdomain.com

  ✅ 使用 HTTPS
     # 使用 Nginx 反向代理或 Traefik

  ✅ 定期更新镜像
     docker-compose pull
     docker-compose up -d

性能优化：
────────────────────────────────────────────
  ✅ 使用 GPU（必需）
     CUDA_VISIBLE_DEVICES=0,1  # 多卡

  ✅ 调整 Worker 配置
     WORKER_GPUS=2
     MAX_BATCH_SIZE=8

  ✅ 资源限制
     # docker-compose.yml
     deploy:
       resources:
         limits:
           cpus: '4'
           memory: 16G

备份策略：
────────────────────────────────────────────
  ✅ 定期备份数据库
     make backup-db

  ✅ 备份重要目录
     tar -czf backup.tar.gz data/ models/

  ✅ 使用 MinIO 或 S3 存储上传文件
     ENABLE_MINIO=true

监控：
────────────────────────────────────────────
  ✅ 健康检查
     docker-compose ps | grep "healthy"

  ✅ 日志收集
     # 使用 ELK Stack 或 Loki

  ✅ 资源监控
     docker stats

  ✅ Prometheus + Grafana
     ENABLE_METRICS=true

高可用部署：
────────────────────────────────────────────
  • 使用 Kubernetes 编排
  • 使用负载均衡器（Nginx/Traefik）
  • 多副本部署
  • 使用外部数据库（PostgreSQL）
  • 使用对象存储（S3/MinIO）

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 更多资源
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • 项目文档:      README.md
  • Docker 命令:   scripts/docker-commands.sh
  • API 文档:      http://localhost:8000/docs
  • 问题反馈:      GitHub Issues

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 提示：
  • 首次部署建议使用 make setup 一键完成
  • 生产环境请务必修改所有默认密钥
  • 建议使用 GPU 以获得最佳性能
  • 定期备份数据和模型文件

祝您使用愉快！ 🚀
